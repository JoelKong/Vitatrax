#include <Wire.h>
#include <SPI.h>
#include <TinyScreen.h>

TinyScreen display = TinyScreen(TinyScreenDefault);

unsigned char exerciseBitmap[] PROGMEM = {
	0xff, 0xff, 0xff, 0xc6, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xc0, 0xff, 0xff, 
	0xff, 0x80, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 
	0x07, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 
	0xc0, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xc0, 0xff, 
	0xff, 0xfd, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	0xfb, 0xdf, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x1e, 
	0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0x0e, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 
	0xc0, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xc0, 0xff, 
	0xff, 0xe0, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xe8, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xff, 0xf0, 
	0x00, 0x0f, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0xbf, 
	0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 
	0xe0, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf8, 0x01, 
	0xff, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0xff, 0xff, 0xef, 0xff, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xc0, 0xff, 
	0xff, 0x87, 0xff, 0xdf, 0xff, 0xc0, 0xff, 0xff, 0x81, 0xff, 0x9f, 0xff, 0xc0, 0xff, 0xff, 0x00, 
	0xff, 0x3f, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x7e, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x78, 0xbf, 
	0xff, 0xc0, 0xff, 0xff, 0xe0, 0x63, 0xff, 0xff, 0xc0, 0xc7, 0xff, 0xf8, 0xf7, 0xff, 0xff, 0xc0, 
	0xc3, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xc0, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x83, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x8f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc0, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf9, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x01, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x1f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};

void setup(void) {
  Wire.begin();
  display.begin();
  display.setBrightness(10);
  display.setFlip(true);
  display.setFont(liberationSans_8ptFontInfo);
  drawMenu();
}

void loop() {
  handleButtons();
}

void handleButtons() {
  if (display.getButtons() & TSButtonUpperLeft) {
    display.clearScreen();
    display.drawRect(0,0,96,64,TSRectangleFilled,TS_8b_Blue);

    // Adjust for Ken's image dimensions
    int imageWidth = 50;
    int imageHeight = 64;
    int xPos = (96 - imageWidth) / 2;
    int yPos = (64 - imageHeight) / 2;

    display.setX(xPos, xPos + imageWidth - 1);
    display.setY(yPos, yPos + imageHeight - 1);
    display.startData();
    display.writeBuffer(exerciseBitmap, imageWidth * (imageHeight / 8)); // Adjusting for 8 pixels per byte
    display.endTransfer();
    delay(1000);
  }

  if (display.getButtons() & TSButtonLowerRight) {
    // Action for the bottom-rightmost button
    // For demonstration purposes, let's just invert the screen colors:
    display.clearScreen();
    display.fontColor(TS_8b_Green, TS_8b_Black);
    display.setCursor(10, 30); 
    display.print("Button Pressed");
    delay(500); // Simple debounce
  }
}

void drawBitmap(const unsigned char* bitmap, int x, int y, int width, int height, uint16_t color) {
  for (int j = 0; j < height; j++) {
    for (int i = 0; i < width; i++) {
      if (pgm_read_byte(bitmap + (i + j * width) / 8) & (1 << (i % 8))) {
        // Don't draw for 1
      } else {
        display.drawPixel(x + i, y + j, color);
      }
    }
  }
}


void drawMenu() {
  display.clearScreen();

  // Top-left arrow coordinates
  int topLeftBaseX = 4; 
  int topLeftBaseY = 4;

  // Draw the top-left arrow
  display.drawLine(topLeftBaseX, topLeftBaseY + 4, topLeftBaseX + 5, topLeftBaseY, TS_8b_Green);
  display.drawLine(topLeftBaseX, topLeftBaseY + 4, topLeftBaseX + 5, topLeftBaseY + 8, TS_8b_Green);
  
  // Fill the inside of the top-left arrow
  for (int i = 0; i < 6; i++) {
    int startY = topLeftBaseY + 4 + i;
    int endY = topLeftBaseY + 4 - i;
    display.drawLine(topLeftBaseX + i, startY, topLeftBaseX + i, endY, TS_8b_Green);
  }

  // Draw "Log" text right next to the top-left arrow
  display.fontColor(TS_8b_Green, TS_8b_Black);
  display.setCursor(topLeftBaseX + 10, 3);
  display.print("Log");

  // Bottom-right arrow coordinates
  int bottomRightBaseX = 88; // Adjusted for bottom-right position
  int bottomRightBaseY = 54; 

  // Draw the bottom-right arrow
  display.drawLine(bottomRightBaseX, bottomRightBaseY, bottomRightBaseX + 6, bottomRightBaseY + 4, TS_8b_Green);
  display.drawLine(bottomRightBaseX, bottomRightBaseY + 8, bottomRightBaseX + 6, bottomRightBaseY + 4, TS_8b_Green);
  
  // Fill the inside of the bottom-right arrow
  for (int i = 0; i < 6; i++) {
    int startY = bottomRightBaseY;
    int endY = bottomRightBaseY + 8;
    display.drawLine(bottomRightBaseX + i, startY + i, bottomRightBaseX + i, endY - i, TS_8b_Green);
  }

  // Draw "Go" text to the left of the bottom-right arrow
  display.fontColor(TS_8b_Green, TS_8b_Black);
  display.setCursor(bottomRightBaseX - 18, 53); // Adjusted to position "Go" to the left of the arrow
  display.print("Go");
}







